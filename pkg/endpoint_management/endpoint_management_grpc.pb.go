// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: endpoint_management.proto

package endpointmanagement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EndpointManagementClient is the client API for EndpointManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointManagementClient interface {
	Add(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type endpointManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointManagementClient(cc grpc.ClientConnInterface) EndpointManagementClient {
	return &endpointManagementClient{cc}
}

func (c *endpointManagementClient) Add(ctx context.Context, in *Endpoint, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/EndpointManagement/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointManagementServer is the server API for EndpointManagement service.
// All implementations must embed UnimplementedEndpointManagementServer
// for forward compatibility
type EndpointManagementServer interface {
	Add(context.Context, *Endpoint) (*emptypb.Empty, error)
	mustEmbedUnimplementedEndpointManagementServer()
}

// UnimplementedEndpointManagementServer must be embedded to have forward compatible implementations.
type UnimplementedEndpointManagementServer struct {
}

func (UnimplementedEndpointManagementServer) Add(context.Context, *Endpoint) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedEndpointManagementServer) mustEmbedUnimplementedEndpointManagementServer() {}

// UnsafeEndpointManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointManagementServer will
// result in compilation errors.
type UnsafeEndpointManagementServer interface {
	mustEmbedUnimplementedEndpointManagementServer()
}

func RegisterEndpointManagementServer(s grpc.ServiceRegistrar, srv EndpointManagementServer) {
	s.RegisterService(&EndpointManagement_ServiceDesc, srv)
}

func _EndpointManagement_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointManagementServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EndpointManagement/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointManagementServer).Add(ctx, req.(*Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

// EndpointManagement_ServiceDesc is the grpc.ServiceDesc for EndpointManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndpointManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EndpointManagement",
	HandlerType: (*EndpointManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _EndpointManagement_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "endpoint_management.proto",
}
