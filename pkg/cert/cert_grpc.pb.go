// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: cert.proto

package cert

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CertClient is the client API for Cert service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertClient interface {
	Cert(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*CertResponse, error)
	CertStream(ctx context.Context, opts ...grpc.CallOption) (Cert_CertStreamClient, error)
}

type certClient struct {
	cc grpc.ClientConnInterface
}

func NewCertClient(cc grpc.ClientConnInterface) CertClient {
	return &certClient{cc}
}

func (c *certClient) Cert(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*CertResponse, error) {
	out := new(CertResponse)
	err := c.cc.Invoke(ctx, "/tls.Cert/Cert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certClient) CertStream(ctx context.Context, opts ...grpc.CallOption) (Cert_CertStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cert_ServiceDesc.Streams[0], "/tls.Cert/CertStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &certCertStreamClient{stream}
	return x, nil
}

type Cert_CertStreamClient interface {
	Send(*CertRequest) error
	Recv() (*CertResponse, error)
	grpc.ClientStream
}

type certCertStreamClient struct {
	grpc.ClientStream
}

func (x *certCertStreamClient) Send(m *CertRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *certCertStreamClient) Recv() (*CertResponse, error) {
	m := new(CertResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CertServer is the server API for Cert service.
// All implementations must embed UnimplementedCertServer
// for forward compatibility
type CertServer interface {
	Cert(context.Context, *CertRequest) (*CertResponse, error)
	CertStream(Cert_CertStreamServer) error
	mustEmbedUnimplementedCertServer()
}

// UnimplementedCertServer must be embedded to have forward compatible implementations.
type UnimplementedCertServer struct {
}

func (UnimplementedCertServer) Cert(context.Context, *CertRequest) (*CertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cert not implemented")
}
func (UnimplementedCertServer) CertStream(Cert_CertStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CertStream not implemented")
}
func (UnimplementedCertServer) mustEmbedUnimplementedCertServer() {}

// UnsafeCertServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertServer will
// result in compilation errors.
type UnsafeCertServer interface {
	mustEmbedUnimplementedCertServer()
}

func RegisterCertServer(s grpc.ServiceRegistrar, srv CertServer) {
	s.RegisterService(&Cert_ServiceDesc, srv)
}

func _Cert_Cert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertServer).Cert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tls.Cert/Cert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertServer).Cert(ctx, req.(*CertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cert_CertStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CertServer).CertStream(&certCertStreamServer{stream})
}

type Cert_CertStreamServer interface {
	Send(*CertResponse) error
	Recv() (*CertRequest, error)
	grpc.ServerStream
}

type certCertStreamServer struct {
	grpc.ServerStream
}

func (x *certCertStreamServer) Send(m *CertResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *certCertStreamServer) Recv() (*CertRequest, error) {
	m := new(CertRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Cert_ServiceDesc is the grpc.ServiceDesc for Cert service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cert_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tls.Cert",
	HandlerType: (*CertServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cert",
			Handler:    _Cert_Cert_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CertStream",
			Handler:       _Cert_CertStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cert.proto",
}
