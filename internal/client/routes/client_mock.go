// Code generated by MockGen. DO NOT EDIT.
// Source: client/routes/client.go
//
// Generated by this command:
//
//	mockgen -source client/routes/client.go -destination client/routes/client_mock.go
//

// Package mock_allroutesclient is a generated GoMock package.
package allroutesclient

import (
	context "context"
	reflect "reflect"
	xdsmodels "xds_server/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CloseConn mocks base method.
func (m *MockClient) CloseConn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConn")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConn indicates an expected call of CloseConn.
func (mr *MockClientMockRecorder) CloseConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConn", reflect.TypeOf((*MockClient)(nil).CloseConn))
}

// Routes mocks base method.
func (m *MockClient) Routes(arg0 context.Context) (chan *xdsmodels.DomainEndpoint, chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes", arg0)
	ret0, _ := ret[0].(chan *xdsmodels.DomainEndpoint)
	ret1, _ := ret[1].(chan error)
	return ret0, ret1
}

// Routes indicates an expected call of Routes.
func (mr *MockClientMockRecorder) Routes(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*MockClient)(nil).Routes), arg0)
}
